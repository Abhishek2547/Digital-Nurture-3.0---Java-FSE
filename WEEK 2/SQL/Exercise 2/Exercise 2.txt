Scenario 1: Handle Exceptions During Fund Transfers

CREATE OR REPLACE PROCEDURE SafeTransferFunds(
    p_from_account_id NUMBER,
    p_to_account_id NUMBER,
    p_amount NUMBER
) AS
    v_from_balance NUMBER;
    v_to_balance NUMBER;
BEGIN
    -- Lock accounts to prevent concurrent modifications
    SELECT Balance INTO v_from_balance FROM Accounts
    WHERE AccountID = p_from_account_id FOR UPDATE;
    
    SELECT Balance INTO v_to_balance FROM Accounts
    WHERE AccountID = p_to_account_id FOR UPDATE;

    -- Check for sufficient funds
    IF v_from_balance < p_amount THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds in the source account.');
    END IF;

    -- Deduct from source account
    UPDATE Accounts
    SET Balance = Balance - p_amount
    WHERE AccountID = p_from_account_id;

    -- Add to destination account
    UPDATE Accounts
    SET Balance = Balance + p_amount
    WHERE AccountID = p_to_account_id;

    -- Commit transaction
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Transfer completed successfully.');

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Account not found. Transfer aborted.');
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('An error occurred during the transfer: ' || SQLERRM);
END SafeTransferFunds;


Scenario 2: Manage Errors When Updating Employee Salaries

CREATE OR REPLACE PROCEDURE UpdateSalary(
    p_employee_id NUMBER,
    p_percentage NUMBER
) AS
    v_current_salary NUMBER;
BEGIN
    -- Get current salary
    SELECT Salary INTO v_current_salary FROM Employees
    WHERE EmployeeID = p_employee_id;

    -- Update salary
    UPDATE Employees
    SET Salary = Salary * (1 + p_percentage / 100)
    WHERE EmployeeID = p_employee_id;

    -- Commit transaction
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Salary updated successfully.');

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Employee ID not found. Salary update aborted.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred while updating salary: ' || SQLERRM);
END UpdateSalary;


Scenario 3: Ensure Data Integrity When Adding a New Customer

CREATE OR REPLACE PROCEDURE AddNewCustomer(
    p_customer_id NUMBER,
    p_name VARCHAR2,
    p_dob DATE,
    p_balance NUMBER
) AS
BEGIN
    -- Insert new customer
    INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
    VALUES (p_customer_id, p_name, p_dob, p_balance, SYSDATE);

    -- Commit transaction
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Customer added successfully.');

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Customer ID already exists. Insertion aborted.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred while adding a customer: ' || SQLERRM);
END AddNewCustomer;
